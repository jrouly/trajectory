-- Enforce foreign keys.
PRAGMA foreign_keys=ON;

-- Create Schools table.
CREATE TABLE IF NOT EXISTS Schools
 (ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Name TEXT NOT NULL,
  Abbreviation TEXT NOT NULL,
  Web TEXT,
  UNIQUE (Name) ON CONFLICT IGNORE,
  UNIQUE (Abbreviation) ON CONFLICT IGNORE);


-- Create Departments table.
CREATE TABLE IF NOT EXISTS Departments
 (ID INTEGER PRIMARY KEY AUTOINCREMENT,
  SchoolID INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Abbreviation TEXT NOT NULL,
  Web TEXT,
  UNIQUE (SchoolID, Name) ON CONFLICT IGNORE,
  UNIQUE (SchoolID, Abbreviation) ON CONFLICT IGNORE,
  FOREIGN KEY (SchoolID) REFERENCES Schools(ID) ON UPDATE CASCADE ON DELETE CASCADE);


-- Create Programs table.
CREATE TABLE IF NOT EXISTS Programs
 (ID INTEGER PRIMARY KEY AUTOINCREMENT,
  SchoolID INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Abbreviation TEXT NOT NULL,
  UNIQUE (SchoolID, Name) ON CONFLICT IGNORE,
  UNIQUE (SchoolID, Abbreviation) ON CONFLICT IGNORE,
  FOREIGN KEY(SchoolID) REFERENCES Schools(ID) ON UPDATE CASCADE ON DELETE CASCADE);


-- Create Courses table.
CREATE TABLE IF NOT EXISTS Courses
 (ID INTEGER PRIMARY KEY AUTOINCREMENT,
  DepartmentID INTEGER NOT NULL,
  Num TEXT NOT NULL,
  Title TEXT NOT NULL,
  Description TEXT NOT NULL,
  UNIQUE (DepartmentID, Num, Title) ON CONFLICT IGNORE,
  FOREIGN KEY(DepartmentID) REFERENCES Departments(ID) ON UPDATE CASCADE ON DELETE CASCADE);


-- Create ProgramRequirements table.
CREATE TABLE IF NOT EXISTS ProgramRequirements
 (Program INTEGER NOT NULL,
  Course INTEGER NOT NULL,
  PRIMARY KEY(Program, Course),
  FOREIGN KEY(Program) REFERENCES Programs(ID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(Course) REFERENCES Courses(ID) ON UPDATE CASCADE ON DELETE CASCADE);


--- Create Prerequisites table.
CREATE TABLE IF NOT EXISTS Prerequisites
 (Course INTEGER NOT NULL,
  Prerequisite INTEGER NOT NULL,
  PRIMARY KEY(Course, Prerequisite),
  FOREIGN KEY(Course) REFERENCES Courses(ID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(Prerequisite) REFERENCES Courses(ID) ON UPDATE CASCADE ON DELETE CASCADE);

