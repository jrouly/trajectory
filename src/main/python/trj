"""
trajectory.py
Author: Jean Michel Rouly

This is the main executable file. Use it to call subcommands in the
application structure.
"""


from argparse import ArgumentParser
import trajectory.log
import sys
import os

from trajectory import engines, scrape
from trajectory import constants as TRJ
from trajectory.models.meta import Engine, Session

def main():
    """
    Handle basic command line argument parsing & configure logging. Route
    logic depending on what the user wants to do.
    """

    # Create top-level command line argument parser.
    parser = ArgumentParser(description=TRJ.PROGRAM_DESC, prog=TRJ.PROGRAM_NAME)
    parser.add_argument("--version", action="version", version=TRJ.PROGRAM_VERSION)
    parser.add_argument("--debug", action="store_true")


    # Create arguments for scraping.
    parser.add_argument("targets", choices=engines.list(),
            nargs="+",
            help="Scraping engines.")
    parser.add_argument("--download",
            help="Download data from the Web.",
            action="store_true")
    parser.add_argument("--digest",
            help="Digest and clean local data.",
            action="store_true")


    # Parse command line arguments.
    args = parser.parse_args(sys.argv[1:])


    # Construct global logging object.
    log = trajectory.log.global_logger("root", debug=args.debug)


    # Start up program.
    log.info("Beginning trj-scrape.")


    # Initialize database connection.
    log.info("Initializing database connection.")
    args.session = Session()


    # Create temporary directory.
    import tempfile
    args.home = TRJ.HOME
    with tempfile.TemporaryDirectory(prefix="trj_") as args.tmp_dir:

      # Hand off control flow to scraper module.
      scrape( args )


    # Exit the program.
    log.info("Exiting.")
    args.session.commit()
    args.session.close()
    sys.exit( 0 )


if __name__ == '__main__':
    main()
